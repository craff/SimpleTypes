This is an example using Simply Type lambda-calculus
(Church's style / Hindley Milner).

The code tries to clean, very modular and was use in my type theory course.

The code is not finished yet.

-------
ROADMAP
-------

Module UnionFind.ml(i):

  Implements Tarjan union find, supports for values attached to
  equivalent classes, using a merge function on these values for union

Module SimpleType.ml(i)

  Implements simple types as a functor from atomic types. It supports
  unification and also schema (generalisation and instanciation).
  Schema uses bindlib's multiple binders.

Module SimpleTerm.ml(i)

  Simply typed lambda-terms as a function taking two modules:
  - A module for type (intended to be produced by Type.Make)
  - A module for a signature of constants to extend your terms

File Test.ml

  some tests ...

File Minimal.ml

  the minimal usage, with no atomic types, no constants.
  In implements an interactive loops with exception handling,
  and three commands:

    def lid = term ;
    whnf term ;
    test term = term ;

  see file.txt for an example.

-------
INSTALL
-------

This software uses

OCaml together with
- earley and earley-ocaml to write parser
- bindlib to handle bound variables

To install it:

- install opam (probably a package of your linux distribution, look on the web)

- if not already done, choose an ocaml compiler, update opam packages list:

  opam update
  opam switch 4.04.0     # earley support for 4.05.0 is not yet on opam

- if you have nothing in your bash rc of you want to use the same shell, do
  what the above command suggests (just after a switch, the environment variable
  are not ready to use OCaml):

  eval `opam config env`

- install the minimum configuration

  opam install bindlib earley earley-ocaml ocamlbuild ocamlfind

-----------
COMPILATION
-----------

- Now you should be able to compile this sofware:

ocamlbuild -use-ocamlfind Test.native

or

make

and to clean up the sourceTree

ocamlbuild -clean

or

make clean

------
ENJOY!
------